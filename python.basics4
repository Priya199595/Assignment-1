{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOrMn3ptiPcogeprMBc2F38",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Priya199595/Assignment-1/blob/main/python.basics4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.  What exactly is []?\n",
        "\n",
        "Ans. An empty list is represented by[].[] contains no items in it.\n",
        "\n",
        "2. In a list of values stored in a variable called spam, how would you assign the value 'hello' as the third value? (Assume [2, 4, 6, 8, 10] are in spam.)\n",
        "\n",
        "Ans. spam[2] = 'hello'"
      ],
      "metadata": {
        "id": "4JWdQ4IMqfdD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Example\n",
        "spam = [2, 4, 6, 8,10]\n",
        "print(spam)\n",
        "spam[2] = 'hello'       #List uses zero based index\n",
        "print(spam)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ko2t1oz0tOBe",
        "outputId": "d87baa1a-3066-408c-8050-62f9225e7d76"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2, 4, 6, 8, 10]\n",
            "[2, 4, 'hello', 8, 10]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Let's pretend the spam includes the list ['a', 'b', 'c', 'd'] for the next three queries.**\n",
        "\n",
        "\n",
        "3. What is the value of spam[int(int('3' * 2) / 11)]?\n",
        "\n",
        "Ans. 'd' (Here we need to note that '3' * 2 is the string '33', which is passed to int() before  dividing by 11. This  evaluatesthe value  to 3, spam[3] is equal to d.)\n"
      ],
      "metadata": {
        "id": "ddHaewOmwLBD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spam = ['a', 'b', 'c', 'd']\n",
        "spam[int(int('3'* 2)/11)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "EldQr4XFxupk",
        "outputId": "7b67bbe7-0885-4f36-d051-6cf02690fd36"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'d'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "4. What is the value of spam[-1]?\n",
        "\n",
        "Ans.  Lists supports negative index and hence spam[-1] will be 'd'\n"
      ],
      "metadata": {
        "id": "3anhRDlV1qgT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spam = ['a', 'b', 'c', 'd']\n",
        "spam[-1]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "JeanUr0l9FOE",
        "outputId": "4301cac3-6ed4-4cac-fddf-8fbab06c41d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'d'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "5.  What is the value of spam[:2]?\n",
        "\n",
        "Ans. spam[:2] will return all the elements in the list spam from 0 to 2 excluding 2"
      ],
      "metadata": {
        "id": "rkPrQqaZ9cq2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "spam = ['a', 'b', 'c', 'd']\n",
        "spam[:2]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rBUly4PT97b2",
        "outputId": "2d7118c8-a09c-4027-829c-3d32968c40a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['a', 'b']"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Let's pretend bacon has the list [3.14, 'cat', 11, 'cat', True] for the next three questions.**\n",
        "\n",
        "6.  What is the value of bacon.index('cat')?\n",
        "\n",
        "Ans. It will return the index of first occurence 'cat'"
      ],
      "metadata": {
        "id": "7GmWidje-I1b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bacon = [3.14, 'cat', 11, 'cat', True]\n",
        "bacon.index('cat')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "neAPRqo5_AR9",
        "outputId": "ab063d06-9d8d-405f-dfdb-ebbcd9372c86"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "7. How does bacon.append(99) change the look of the list value in bacon?\n",
        "\n",
        "Ans.  The work of append is to add items at the end of the list."
      ],
      "metadata": {
        "id": "ujY0WF0s_ihm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bacon = [3.14, 'cat', 11, 'cat', True]\n",
        "bacon.append(99)\n",
        "bacon\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wH8lHVBq_01v",
        "outputId": "75939d8b-5809-4fc2-c6fd-0977eab0b4e0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3.14, 'cat', 11, 'cat', True, 99]"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "8. How does bacon.remove('cat') change the look of the list in bacon?\n",
        "\n",
        "Ans. It will remove the first occurence of the item."
      ],
      "metadata": {
        "id": "G-jJsZqUAJBF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bacon = [3.14, 'cat', 11, 'cat', True]\n",
        "bacon.remove('cat')\n",
        "bacon"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q_QrHQSnAdSg",
        "outputId": "ea41c112-1a56-4d8d-e06b-16f2cc0aaf2a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3.14, 11, 'cat', True]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "9. What are the list concatenation and list replication operators?\n",
        "\n",
        "Ans. List concatenation operator is (+) and list replication operator is (*)"
      ],
      "metadata": {
        "id": "PCBOXiqVA7kz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "A1 = [1,4]\n",
        "A2 = [2,5]\n",
        "\n",
        "#list concatenation\n",
        "11+12"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A8qM5kTGBnSr",
        "outputId": "1402c3df-e077-4f06-ce24-a4a14f333d4d"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "23"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "A1 = [2,6]\n",
        "\n",
        "#List replication\n",
        "A1*4"
      ],
      "metadata": {
        "id": "TiyzvX0iBn16",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "158870cf-944c-4635-e3f1-f8d2ec93ff4c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 6, 2, 6, 2, 6, 2, 6]"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "10. What are the two methods for removing items from a list?\n",
        "\n",
        "Ans.  append() will add values at the end of the list, while insert() can add them anywhere in the list.\n"
      ],
      "metadata": {
        "id": "yKBDyURAIcJI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bacon = [3.14, 'cat', 11, 'cat', True]\n",
        "bacon.append(99)                # adds the values at the end of the list\n",
        "bacon"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BsE3ryBQI_HS",
        "outputId": "71b062a9-1407-44b8-d884-9f265588821f"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[3.14, 'cat', 11, 'cat', True, 99]"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "spam = [2, 4, 6, 8, 10]\n",
        "spam.insert(2, 'hello')    #adds values anywhere in the list.\n",
        "spam"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X-fEsr2MJSaJ",
        "outputId": "0abc0d9e-1d20-45a7-adad-a83414abce77"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[2, 4, 'hello', 6, 8, 10]"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "11. What are the two methods for removing items from a list?\n",
        "\n",
        "Ans.  The del statement and remove() are the two methods used for removing items from the list.\n",
        "\n",
        "\n",
        "12. Describe how list values and string values are identical.\n",
        "\n",
        "Ans. 1. Both have indexes and slices.\n",
        "     2. Both can be concatenated and replicated.\n",
        "     3.Both can be used in loops.\n",
        "     4.Both lists and strings can be passed to len()\n",
        "     5.Both can be used with the in and not in operators.\n",
        "\n",
        "\n",
        "13. What is  the difference between tuples and lists?\n",
        "\n",
        "Ans.   Lists are mutable - they can have values added, removed, or changed as well as lists use the square brackets, [].\n",
        "\n",
        "Tuples  are immutable , they cannot be changed at all. Tuples are written using parentheses, ( ).\n",
        "\n",
        "\n",
        "14. How do you type a tuple value that only contains the integer 42?\n",
        "\n",
        "Ans.  "
      ],
      "metadata": {
        "id": "fZqrEl5CJ0rf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tuple = (22 ,)\n",
        "tuple"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2k1t4INrMYzG",
        "outputId": "3dcbc116-acf2-4974-8ebc-0a27a59bc726"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(22,)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "15. How do you get a list value's tuple form? How do you get a tuple value's &list form?\n",
        "\n",
        "Ans.The tuple() and list() functions,  are used to convert a list to tuple and tuple to list.\n",
        "\n",
        " 16. Variables that 'contain' list values are not necessarily lists themselves. Instead, what do they contain?\n",
        "\n",
        " Ans.  They contain references to list values.\n",
        "\n",
        "\n",
        "\n",
        "17. How do you distinguish between copy.copy() and copy.deepcopy()?\n",
        "\n",
        "Ans.  The copy.copy() function will do a shallow copy of a list,\n",
        "The copy.deepcopy() function will do a deep copy of a list,  only copy.deepcopy() will duplicate any lists inside the list."
      ],
      "metadata": {
        "id": "OLULhwTKK6kg"
      }
    }
  ]
}